/* A note on height:
 * It is intended that the entire page be visible, so that the user does not
 * need to scroll up and down to access parts of the UI. To this end, it would
 * seem reasonable to use the vh unit, setting the height of the page content
 * equal to the height of the layout viewport. That doesn't work on Safari and
 * other mobile browsers, however, where the address bar covers part of the
 * layout viewport until the user scrolls. Instead we'll set the height of the
 * page content to 100% of the root element height, which appears to be equal
 * to the actually visible part of the layout viewport when the page loads.
 * When using a % value for height, the parent element must have a height
 * value, or else the height property on the child does nothing. So we give
 * html and body a height of 100%, for starters.
 */

:root {
  --header-height: 50px;
  --header-btn-height: calc(.6 * var(--header-height));
  --controls-height: 70px;
  --controls-btn-height: calc(.8 * var(--controls-height));
  --view-height: calc(100% - var(--header-height) - var(--controls-height));
}

html, body {
  height: 100%
}

body {
  margin: 0;
}

#header {
  height: var(--header-height); 
  display: flex;
  padding: 0px 18px
}

#header_left, #header_center, #header_right {
  flex: 1;
  display: flex;
  align-items: center;
}

#header_left {
  justify-content: left;
}

#header_center {
  justify-content: center;
  text-align: center;
  font-size: 1.3rem;
}

#header_right {
  justify-content: right;
}

#info {
  height: var(--header-btn-height);
  width: var(--header-btn-height);
}

#view {
  /* Give view a position value so that overlay is positioned relative to it. */
  position: relative;
  height: var(--view-height);
  overflow: scroll;
  background-color: silver;
}

#board, #overlay {
  padding: 20px;
}

#overlay {
  z-index: 1;
  position: absolute;
  top: 0;
  opacity: 0.6;
}

#board, #overlay_cells {
  display: grid;
  grid-auto-rows: 18px;
  grid-auto-columns: 18px;
}

.board_cell_empty {
  background-color: lightgray;
  border: 1.125px solid silver;
}

.board_cell_filled {
  border: 2.25px outset silver;
}

.overlay_cell_filled {
  border: 2.25px inset silver;
}

#controls {
  height: var(--controls-height);
  display: flex;
  align-items: center;
  justify-content: center;
}

#move, #species, #submit {
  margin: calc(var(--controls-height) / 10);
}

#species, #submit {
  height: var(--controls-btn-height);
  width: var(--controls-btn-height);
}

#move {
  --border-width: calc(.06 * var(--controls-btn-height));
  --height: calc(var(--controls-btn-height) - (2 * var(--border-width))); 
  border: var(--border-width) solid;
  border-radius: 6px;
  border-color: transparent;
  height: var(--height);
  width: var(--height);
}

/* modal_container completely covers view */
#modal_container {
  z-index: 2;
  position: absolute;
  top: var(--header-height);
  bottom: var(--controls-height);
  height: var(--view-height);
  width: 100%;
  display: flex;
  justify-content: center;
  align-items: center;
}

#modal {
  background-color: white;
  border: ridge silver;
  /* Using max-height rather than height causes modal to shrink to the height
   * of its children when the children take up < 90% of modal_container's
   * height. */
  max-height: 90%;
  /* If, on the other hand, modal's childen take up > 90% of modal_container's
   * height, then the below two properties along with {overflow: scroll} on
   * modal_content cause modal_content to shrink to fit inside modal. */
  display: flex;
  flex-direction: column;
}

#modal_content {
  overflow: scroll;
}

@media (min-width: 769px) {
  #modal {
    width: 65%;
  }
} 
@media (max-width: 768px) {
  #modal {
    width: 90%;
  }
}

#modal_header {
  height: var(--header-height);
  display: flex;
  align-items: center;
  justify-content: right;
  /* Make close equidistant from the top and right sides of modal_header. */
  padding-right: calc((var(--header-height) - var(--header-btn-height))/2);
}

#close {
  height: var(--header-btn-height);
  width: var(--header-btn-height);
}

#about {
  margin: 1% 1%;
  font-size: 1.1rem;
}

.icon_button {
  cursor: pointer;
  filter: invert(30%);
}

/* Class to apply to an icon button when it is touched or moused over.
 * One would think that the :hover pseudo-class could be used for this, but it
 * causes problems on touch devices; after being touched, the icon enters the
 * hover state, and remains there until the user touches somewhere else. */
.icon_button_over {
  filter: invert(10%);
}
